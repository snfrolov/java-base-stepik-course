package java_base_syntax_2;

import com.google.common.math.BigIntegerMath;
import java.math.BigInteger;

/**
 –†–µ–∞–ª–∏–∑—É–π—Ç–µ –º–µ—Ç–æ–¥, –≤—ã—á–∏—Å–ª—è—é—â–∏–π —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞.

 –§–∞–∫—Ç–æ—Ä–∏–∞–ª ùëÅ –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –∫–∞–∫ 1‚ãÖ2‚ãÖ...‚ãÖùëÅ.

 –ü–æ—Å–∫–æ–ª—å–∫—É —ç—Ç–æ –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ —Ä–∞—Å—Ç—É—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è, —Ç–æ –¥–∞–∂–µ –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö ùëÅ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ç–∏–ø–æ–≤ int –∏ long –æ—á–µ–Ω—å —Å–∫–æ—Ä–æ –Ω–µ —Ö–≤–∞—Ç–∏—Ç.
 –ü–æ—ç—Ç–æ–º—É –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å BigInteger.
 */

class Lesson2Program8 {

    static BigInteger factorialForStepik(int value) {
        return value == 0 ? BigInteger.ONE : BigInteger.valueOf(value).multiply(factorialForStepik(value - 1));
    }

    static BigInteger factorial(int value) {
        return BigIntegerMath.factorial(value);
    }
}